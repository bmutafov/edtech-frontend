{"version":3,"sources":["config.ts","utils/isDev.ts","hooks/useGetRequest.ts","utils/defaultTexts.ts","contexts/TextsContext.tsx","pages/Homepage.tsx","routes/Router.tsx","index.tsx"],"names":["config","baseURI","development","process","env","NODE_ENV","isDev","useGetRequest","endpoint","useState","isLoading","setIsLoading","responseData","setResponseData","undefined","error","setError","useEffect","a","url","axios","get","response","data","console","fetchData","loading","defaultTexts","searchText","signinText","edtchText","navleftText","TextsContext","createContext","TextsContextProvider","children","Provider","value","Homepage","Router","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAIeA,EAJA,CACbC,QAAS,wC,gBCCLC,GAAwBC,IAAQC,IAAIC,UAAqC,gBAAzBF,IAAQC,IAAIC,SAMnDC,EAJD,WACZ,OAAOJ,GCsCMK,EA5BO,SAAcC,GAAqD,IAAD,EACpDC,oBAAkB,GADkC,mBAC/EC,EAD+E,KACpEC,EADoE,OAE9CF,mBAA6B,MAFiB,mBAE/EG,EAF+E,KAEjEC,EAFiE,OAG5DJ,wBAA6BK,GAH+B,mBAG/EC,EAH+E,KAGxEC,EAHwE,KAyBtF,OApBAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEAERC,EAAMnB,EAAOC,QAAUO,EAFf,SAGSY,IAAMC,IAAiBF,GAHhC,OAGRG,EAHQ,OAIdT,EAAgBS,EAASC,MAJX,gDAMVjB,KAEFkB,QAAQT,MAAR,MAEFC,EAAS,EAAD,IAVM,yBAYdL,GAAa,GAZC,4EAAH,qDAgBfc,KACC,CAACjB,IAEG,CAAEe,KAAMX,EAAcc,QAAShB,EAAWK,UCjCpCY,EAPM,CACnBC,WAAY,6BACZC,WAAY,UACZC,UAAW,SACXC,YAAa,iBCGFC,EAAeC,wBAA2BN,GAI1CO,EAAuB,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,SAC7BZ,EAAShB,EAA2B,UAApCgB,KAER,OAAO,kBAACS,EAAaI,SAAd,CAAuBC,MAAOd,GAAQI,GAAeQ,I,eCF/CG,EAVY,WACzB,OACE,6BACE,gCACE,uECMOC,EARU,WACvB,OACE,kBAAC,IAAD,CAAeC,SAAUrC,oBACvB,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,IAAIC,UAAWL,MCDvCM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.e4308c52.chunk.js","sourcesContent":["const config = {\n  baseURI: 'https://jsonplaceholder.typicode.com', // The main URI to the API to which the app makes requests to (exlude trailing /)\n};\n\nexport default config;\n","import process from 'process';\n\nconst development: boolean = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nconst isDev = (): boolean => {\n  return development;\n};\n\nexport default isDev;\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport config from '../config';\nimport isDev from '../utils/isDev';\n\ninterface GetRequestResult<T> {\n  data: T | null;\n  loading: boolean;\n  error?: string;\n}\n\n/** @description Creates a GET request to the base URI set up in the config file and the endpoint provided as an argument\n * @param {string} endpoint Endpoint to which the GET request is made\n * @return {Array} The result, loading state and error state as an array which can be destructured\n */\nconst useGetRequest = <FetchedData>(endpoint: string): GetRequestResult<FetchedData> => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [responseData, setResponseData] = useState<FetchedData | null>(null);\n  const [error, setError] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const url = config.baseURI + endpoint;\n        const response = await axios.get<FetchedData>(url);\n        setResponseData(response.data);\n      } catch (e) {\n        if (isDev()) {\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [endpoint]);\n\n  return { data: responseData, loading: isLoading, error };\n};\n\nexport default useGetRequest;\n","const defaultTexts = {\n  searchText: 'What are you searching for',\n  signinText: 'Sign In',\n  edtchText: 'EdTech',\n  navleftText: 'For Companies',\n};\n\nexport default defaultTexts;\n","import React from 'react';\nimport { createContext } from 'react';\nimport useGetRequest from '../hooks/useGetRequest';\nimport defaultTexts from '../utils/defaultTexts';\n\nexport type TextsScheme = typeof defaultTexts;\n\nexport const TextsContext = createContext<TextsScheme>(defaultTexts);\n\ntype ReactChildren = { children?: React.ReactNode };\n\nexport const TextsContextProvider = ({ children }: ReactChildren): JSX.Element => {\n  const { data } = useGetRequest<TextsScheme>('/texts');\n\n  return <TextsContext.Provider value={data || defaultTexts}>{children}</TextsContext.Provider>;\n};\n","import React from 'react';\n\nconst Homepage: React.FC = () => {\n  return (\n    <div>\n      <header>\n        <p>Boilerplate code for EdTech front-end</p>\n      </header>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Homepage from '../pages/Homepage';\n\nconst Router: React.FC = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/\" component={Homepage} />\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { TextsContextProvider } from './contexts/TextsContext';\nimport Router from './routes/Router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TextsContextProvider>\n      <Router />\n    </TextsContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}